#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# rate controller (transaction per second) docs hyperledger.github.io/caliper/v0.2/rate-controllers/

---
test:
  workers:
    type: local
    number: 5
  rounds:
  - label: Init Ledger.
    txNumber: 1
    rateControl:
      type: fixed-rate
      opts: 
        tps: 1
    arguments:
      assets: 25
    callback: ./benchmarks/fabcar/initCarLedger.js
  - label: Random Transactions.
    txDuration: 10
    rateControl:
      type: fixed-rate
      opts:
        tps: 10
    arguments:
      assets: 25
      startKey: '1'
      endKey: '50'
    callback: ./benchmarks/fabcar/randomTx.js
  - label: Change car owner.
    txDuration: 10
    rateControl:
      type: fixed-rate
      opts:
        tps: 10
    arguments:
      assets: 25
    callback: ./benchmarks/fabcar/changeCarOwner.js
  - label: Query all cars.
    txDuration: 10
    rateControl:
      type: fixed-rate
      opts:
        tps: 10
    arguments:
      assets: 25
      startKey: '1'
      endKey: '50'
    callback: ./benchmarks/fabcar/queryAllCars.js
  - label: Query a car.
    txDuration: 10
    rateControl:
      type: fixed-rate
      opts:
        tps: 10
    arguments:
      assets: 25
    callback: ./benchmarks/fabcar/queryCar.js
  - label: Create a car.
    txDuration: 10
    rateControl:
      type: fixed-rate
      opts:
        tps: 10
    callback: ./benchmarks/fabcar/createCar.js
monitor:
  type:
  - docker
  - process
  docker:
    name:
    - all
  process:
    processes:
    - command: node
      arguments: fabricClientWorker.js
      multiOutput: avg

  interval: 1